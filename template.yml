AWSTemplateFormatVersion: '2010-09-09'
Description: SSH Jump Host
Parameters:
  dockerImageVersion:
    Description: Docker image version
    Type: String
  lastRestartedTimestamp:
    Description: Jump host last cycle time
    Type: String
  subnetIds:
    ConstraintDescription: comma separated list of subnet-ids
    Description: Subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
  vpcId:
    ConstraintDescription: must begin with vpc- and can contain only alphanumeric
      characters
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  dnsDomain:
    Description: DNS Domain to use for the service
    Type: String
  hostname:
    Type: String
    Default: "__default__"
  sslCertificateId:
    Type: String
  logStreamName:
    Description: Stream name of the Kinesis stream intended to deliver logs to
    Type: String
  logStreamArn:
    Description: Stream arn of the Kinesis stream intended to deliver logs to
    Type: String
Conditions:
    useDefaultHostname:
      "Fn::Equals":
        - Ref: hostname
        - "__default__"

Resources:
  dnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: "useDefaultHostname"
    Properties:
      HostedZoneName:
        '|Join|':
          - '|Ref|dnsDomain'
          - '.'
      Name:
        'Fn::If':
          - 'useDefaultHostname'
          - '|Join|':
            - 'cbastion'
            - '_'
            - '|Ref|vpcId'
            - '_'
            - '|Ref|AWS::Region'
            - '.'
            - '|Ref|dnsDomain'
          - '|Join|.':
            - '|Ref|hostname'
            - '|Ref|dnsDomain'
      AliasTarget:
        DNSName: '|GetAtt|elb|DNSName'
        HostedZoneId: '|GetAtt|elb|CanonicalHostedZoneNameID'
      Type: A

  elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Listeners:
        - InstancePort: 8080
          InstanceProtocol: HTTP
          LoadBalancerPort: 443
          Protocol: HTTPS
          SSLCertificateId: '|Ref|sslCertificateId'
        - InstancePort: 2222
          InstanceProtocol: TCP
          LoadBalancerPort: 22
          Protocol: TCP
      SecurityGroups:
      - Ref: elbsg
      Subnets:
        Ref: subnetIds
      HealthCheck:
        HealthyThreshold: 2
        Interval: 30
        Target: HTTP:8080/status
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionSettings:
        IdleTimeout: 3600
  elbsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB
      VpcId:
        Ref: vpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: <your-ip-cidr>
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  elbsgHttpEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        DestinationSecurityGroupId:
          Ref: ec2InstanceSecurityGroup
        FromPort: 8080
        GroupId:
          Ref: elbsg
        IpProtocol: tcp
        ToPort: 8080

  elbsgSshEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        DestinationSecurityGroupId:
          Ref: ec2InstanceSecurityGroup
        FromPort: 2222
        GroupId:
          Ref: elbsg
        IpProtocol: tcp
        ToPort: 2222
  asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames:
        - Ref: elb
      VPCZoneIdentifier:
        Ref: subnetIds
      Cooldown: '10'
      HealthCheckGracePeriod: '600'
      HealthCheckType: ELB
      LaunchConfigurationName:
        Ref: launchConfiguration
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      TerminationPolicies:
      - OldestlaunchConfiguration
      Tags:
        - Key: dockerImageVersion
          PropagateAtLaunch: true
          Value:
            Ref: dockerImageVersion
        - Key: lastRestartedTimestamp
          PropagateAtLaunch: true
          Value:
            Ref: lastRestartedTimestamp
        - Key: name
          PropagateAtLaunch: true
          Value:
            Ref: AWS::StackId
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
        SuspendProcesses: ["ScheduledActions"]

  scheduledBastionAdd:
    Type: "AWS::AutoScaling::ScheduledAction"
    Properties:
      AutoScalingGroupName:
        Ref: asg
      MaxSize: 2
      MinSize: 2
      DesiredCapacity : 2
      Recurrence: "0 4 * * *"

  scheduledBastionShutdown:
    Type: "AWS::AutoScaling::ScheduledAction"
    Properties:
      AutoScalingGroupName:
        Ref: asg
      MaxSize: 2
      MinSize: 1
      DesiredCapacity : 1
      Recurrence: "5 4 * * *"

  launchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups:
        - "|ref|ec2InstanceSecurityGroup"
      ImageId: "ami-308f2643"
      InstanceType: "t2.micro"
      IamInstanceProfile: "|ref|ec2InstanceProfile"
      "@TaupageUserData@":
        application_id: "|Ref|AWS::StackName"
        application_version: "|Ref|dockerImageVersion"
        last_restarted_timestamp: "|Ref|lastRestartedTimestamp"
        stack_id:
          Ref: AWS::StackId
        source:
          '|Join|':
            - "12345678912.dkr.ecr.us-east-1.amazonaws.com/jump-auth:"
            - "|Ref|dockerImageVersion"
        health_check_path: "/status"
        health_check_port: 8080
        health_check_timeout_seconds: 30
        root: true
        notify_cfn:
          resource: asg
          stack: "|Ref|AWS::StackName"
        ports:
          2222: 22
          8080: 8080
        runtime: Docker
        docker:
          log_driver: gelf
          log_opt:
            gelf-address: udp://localhost:12201
        logstash:
          enabled: true
          kinesis_stream: "|Ref|logStreamName"
          tags:
            origin: "|Ref|AWS::StackName"
            stage: Stage

  ec2InstanceSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Allow HTTP Network Traffic and SSH"
        VpcId:
          Ref: vpcId
        SecurityGroupIngress:
          - IpProtocol: "tcp"
            SourceSecurityGroupId: "|Ref|elbsg"
            FromPort: 8080
            ToPort: 8080
          - IpProtocol: "tcp"
            SourceSecurityGroupId: "|Ref|elbsg"
            FromPort: 22
            ToPort: 2222
          - IpProtocol: "tcp"
            CidrIp: <your-ip-cidr>
            FromPort: 22
            ToPort: 22


  ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: ec2Role

  ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyName: DockerRepoReadonly
        PolicyDocument:
          Statement:
          - Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:BatchGetImage
            Effect: Allow
            Resource: "arn:aws:ecr:us-east-1:033675148556:repository/jump-auth"
          Version: '2012-10-17'
      - PolicyName: KinesisWrite
        PolicyDocument:
          Statement:
          - Action:
            - kinesis:DescribeStream
            - kinesis:GetRecords
            Effect: Allow
            Resource: "|Ref|logStreamArn"
          Version: '2012-10-17'
      - PolicyName: DockerAuth
        PolicyDocument:
          Statement:
          - Action:
            - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          Version: '2012-10-17'

Outputs:
  PublicDNS:
    Description: Public DNSName
    Value: "|Ref|dnsRecord"
